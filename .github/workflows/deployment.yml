name: CI/CD

on:
    push:
        branches:
            - master

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_REGION: ${{ secrets.AWS_REGION }}
    AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
    EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
    EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
    CONTAINER_NAME: the_django_project

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build and push Docker image to ECR
              run: |
                  # Build and push Docker image
                  docker build -t ${{ env.ECR_REPOSITORY }}:${GITHUB_SHA} .
                  docker push ${{ env.ECR_REPOSITORY }}:${GITHUB_SHA}

    deploy:
        runs-on: [self-hosted, "backend"]
        needs: build

        steps:
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}
            - name: Deploy to Staging
              run: |
                  ssh -o StrictHostKeyChecking=no -i private_key ${{ env.EC2_USERNAME }}@${{ env.EC2_INSTANCE_IP }} \ 
                  'sudo aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com && \
                  sudo docker stop ${{ env.CONTAINER_NAME }} || true && \
                  sudo docker rm ${{ env.CONTAINER_NAME }} || true && \
                  sudo docker pull ${{ env.ECR_REPOSITORY }}:${GITHUB_SHA} && \
                  sudo docker run -d --name ${{ env.CONTAINER_NAME }} -p 8000:8000 ${{ env.ECR_REPOSITORY }}:${GITHUB_SHA} &&
                  sudo docker system prune -a -f'
